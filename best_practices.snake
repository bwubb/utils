import shutil
import glob
import os
import errno
from collections import defaultdict

#Consider making a Fastq_pair and/or Mapped_Bam object and/or Input_Bam

def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno==errno.EEXIST and os.path.isdir(path):
            pass

with open('samples.list','r') as infile:#sample_list in config, default is samples.list
    SAMPLES=infile.read().splitlines()

DATA=defaultdict(dict)
FILES=defaultdict(lambda: #RUN
    defaultdict(lambda: #LANE
        defaultdict(lambda: #INDEX
            defaultdict(list))))

#if not fastq.json

for sample in SAMPLES:
    mkdir_p('logs/cluster/%s' % sample)
    files=sorted(glob.glob('FASTQ/{sample}_*.fastq.gz'.format(sample=sample)))
    assert all([len(files) >= 2,len(files) % 2 == 0]), 'Inproper number of files for {sample} : {files}'.format(sample=sample,files=files)
    fq_pairs=zip(files[::2],files[1::2])
    for p in fq_pairs:#mv to func elsewhere
        for i,j in enumerate(p[0]):
            if p[1][i]!=j:
                assert all([p[0][i]=='1',p[1][i]=='2']),'Fastq pairs {0} {1} do not appear properly paired'.format(*p)
        name=os.path.basename(p[0]).rstrip('.fastq.gz').split('_')#fix for sample names with _
        assert name[0]==sample,'{0} != {1}'.format(name[0],sample)
        #Just write a samples.json which has all the bams by ref from fq pair, you are essentially making one
        DATA[sample].update({'bam_input/work/{SAMPLE}/{REF}/{RUN}/{LANE}/mapped.bam'.format(SAMPLE=sample,REF=config['resources']['reference']['key'],RUN=name[1],LANE=name[2]):{'run':name[1],'lane':name[2],'index':name[4],'R1':p[0],'R2':p[1]}})
        FILES[sample][name[1]][name[2]][name[4]]=[p[0],p[1]]

def something_like_this(wildcards):
    return FILES[wildcards.sample][wildcards.RUN][wildcards.LANE][wilcards.index]#Where this is a dict {R1, R2}

def get_reads1(wildcards):
    return DATA[wildcards.sample]['bam_input/work/{wildcards.sample}/{wildcards.reference}/{wildcards.RUN}/{wildcards.LANE}/mapped.bam'.format(wildcards=wildcards)]['R1']

def get_reads2(wildcards):
    return DATA[wildcards.sample]['bam_input/work/{wildcards.sample}/{wildcards.reference}/{wildcards.RUN}/{wildcards.LANE}/mapped.bam'.format(wildcards=wildcards)]['R2']

def get_index(wildcards):
    return DATA[wildcards.sample]['bam_input/work/{wildcards.sample}/{wildcards.reference}/{wildcards.RUN}/{wildcards.LANE}/mapped.bam'.format(wildcards=wildcards)]['index']

def input_N(wildcards):
    return 'bam_input/work/{sample}/{reference}/input.bam'.format(sample=wildcards.sample,reference=wildcards.reference,N=len(list(iter(DATA[wildcards.sample]))))

def map_input(wildcards):
    inputs=[]
    for RUN,_run in FILES[wildcards.sample].items():
        for LANE,_lane in _run.items():
            for INDEX in list(_lane.keys()):
                inputs.append('bam_input/work/{wildcards.sample}/{wildcards.reference}/{run}/{lane}/{index}/mapped.bam'.format(wildcards=wildcards,run=RUN,lane=LANE,index=INDEX))
    assert len(inputs)>0
    return sorted(inputs)

def get_fastqs(wildcards):
    return {'R1':FILES[wildcards.sample][wildcards.run][wildcards.lane][wildcards.index][0],'R2':FILES[wildcards.sample][wildcards.run][wildcards.lane][wildcards.index][1]}

def flatten_dict(d):
    def items():
        for key, value in d.items():
            if isinstance(value, dict):
                for subkey, subvalue in flatten_dict(value).items():
                    yield key + "_" + subkey, subvalue
            else:
                yield key, value
    return dict(items())

#They have wrappers for a lot of bioinformatics stuff
rule all:
    input:
        #sorted(['bam_input/work/{sample}/{reference}/input.{N}.bam'.format(sample=sample,reference=config['resources']['reference']['key'],N=len(list(iter(DATA[sample])))) for sample in iter(DATA)])
        #sorted(["bam_input/final/{sample}/{reference}/{sample}.ready.bam.bai".format(sample=sample) for sample in iter(DATA)])
        expand("bam_input/final/{sample}/{reference}/{sample}.ready.bam.bai",sample=SAMPLES,reference=config['resources']['reference']['key'])

rule aln_pe:
    input:
        unpack(get_fastqs)
    output:
        "bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/mapped.bam"
    params:
        LB=config['resources']['targets']['key'],###here
        fasta=config['resources']['reference']['file']
    threads:
        16
    shell:
        "bwa mem -M -t {threads} {params.fasta} {input.R1} {input.R2} | samtools addreplacerg -r 'ID:{wildcards.run}.{wildcards.lane}' -r 'PU:{wildcards.index}' -r 'PL:illumina' -r 'LB:{params.LB}' -r 'SM:{wildcards.sample}' -@ {threads} - | samtools sort -@ {threads} -o {output}"

rule input_ready:
    input:
        map_input
    output:
        "bam_input/work/{sample}/{reference}/input.bam"
    run:
        if len(input)==1:
            shell("rsync {input} {output}")
        else:
            shell("samtools merge -f {output} {input}")

rule MarkDuplicates:
    input:
        "bam_input/work/{sample}/{reference}/input.bam"
    output:
        bam="bam_input/work/{sample}/{reference}/mDup.bam",
        metrics="bam_input/final/{sample}/metrics/{reference}/mark_duplicates.table"
    params:
        memory="10240m"
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/picard/build/libs/picard.jar MarkDuplicates I={input} O={output.bam} M={output.metrics} CREATE_INDEX=true VALIDATION_STRINGENCY=LENIENT"

rule RealignerTargetCreator:
    input:
        "bam_input/work/{sample}/{reference}/mDup.bam"
    output:
        "bam_input/work/{sample}/{reference}/IndelRealigner.intervals"
    params:
        memory="10240m",
        reference=config['resources']['reference']['file'],
        known=["/home/bwubb/b37_genomes/1000G_phase1.indels.b37.vcf","/home/bwubb/b37_genomes/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T RealignerTargetCreator -I {input} -o {output} -known {params.known[0]} -known {params.known[1]}"

rule IndelRealigner:
    input:
        bam="bam_input/work/{sample}/{reference}/mDup.bam",
        targets="bam_input/work/{sample}/{reference}/IndelRealigner.intervals"
    output:
        "bam_input/work/{sample}/{reference}/realign.bam"
    params:
        memory="10240m",
        reference=config['resources']['reference']['file'],
        known=["/home/bwubb/b37_genomes/1000G_phase1.indels.b37.vcf","/home/bwubb/b37_genomes/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T IndelRealigner -I {input.bam} -o {output} -targetIntervals {input.targets} -known {params.known[0]} -known {params.known[1]}"

rule FirstPass_BaseRecalibrator:#update resources
    input:
        "bam_input/work/{sample}/{reference}/realign.bam"
    output:
        "bam_input/final/{sample}/metrics/{reference}/recal_data.table"
    params:
        memory="10240m",
        reference=config['resources']['reference']['file'],
        knownSites=["$HOME/b37_genomes/dbsnp_135.b37.vcf","$HOME/b37_genomes/1000G_phase1.indels.b37.vcf","$HOME/b37_genomes/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T BaseRecalibrator -I {input} -o {output} -knownSites {params.knownSites[0]} -knownSites {params.knownSites[1]} -knownSites {params.knownSites[2]}"

rule SecondPass_BaseRecalibrator:
    input:
        "bam_input/work/{sample}/{reference}/realign.bam",
        "bam_input/final/{sample}/metrics/{reference}/recal_data.table"
    output:
        "bam_input/final/{sample}/metrics/{reference}/post_recal_data.table"
    params:
        memory="10240m",
        reference=config['resources']['reference']['file'],
        knownSites=["$HOME/b37_genomes/dbsnp_135.b37.vcf","$HOME/b37_genomes/1000G_phase1.indels.b37.vcf","$HOME/b37_genomes/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T BaseRecalibrator -I {input[0]} -BQSR {input[1]} -o {output} -knownSites {params.knownSites[0]} -knownSites {params.knownSites[1]} -knownSites {params.knownSites[2]}"

rule AnalyzeCovariates:
    input:
        before="bam_input/final/{sample}/metrics/{reference}/recal_data.table",
        after="bam_input/final/{sample}/metrics/{reference}/post_recal_data.table"
    output:
        csv="bam_input/final/{sample}/metrics/BQSR.csv",
        pdf="bam_input/final/{sample}/metrics/BQSR.pdf"
    params:
        memory="10240m",
        reference=config['resources']['reference']['file'],
        knownSites=["$HOME/b37_genomes/dbsnp_135.b37.vcf","$HOME/b37_genomes/1000G_phase1.indels.b37.vcf","$HOME/b37_genomes/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T AnalyzeCovariates -before {input.before} -after {input.after} -csv {output.csv} -plots {output.pdf}"

rule PrintReads:
    input:
        bam="bam_input/work/{sample}/{reference}/realign.bam",
        bqsr="bam_input/final/{sample}/metrics/{reference}/recal_data.table"
    output:
        "bam_input/work/{sample}/{reference}/recal.bam"
    params:
        memory="1020m",
        reference=config['resources']['reference']['file']
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T PrintReads -I {input.bam} -BQSR {input.bqsr} -o {output}"

rule ValidateSamFile:
    input:
        "bam_input/work/{sample}/{reference}/recal.bam"
    output:
        "bam_input/work/{sample}/{reference}/validation_data.table"
    params:
        memory="10240m"
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/picard/build/libs/picard.jar ValidateSamFile I={input} O={output} MODE=SUMMARY"

rule validation_pass:
    input:
        "bam_input/work/{sample}/{reference}/validation_data.table"
    output:
        "bam_input/final/{sample}/metrics/{reference}/validation_data.table"
    run:
        with open(input[0],'r') as file:
            lines=file.read().splitlines()
        if all(not x.startswith('ERROR') for x in lines):
            shutil.copyfile(input[0],output[0])
        else:
            for x in lines:
                if x.startswith('ERROR'):
                    print(x)

def ready_bam_input(wildcards):
    bam="bam_input/work/{sample}/{reference}/recal.bam".format(sample=wildcards.sample,reference=config['resources']['reference']['key'])
    table="bam_input/final/{sample}/metrics/{reference}/validation_data.table".format(sample=wildcards.sample,reference=config['resources']['reference']['key'])
    return bam,table

rule ready_bam:
    input:
        #ready_bam_input
        bam="bam_input/work/{sample}/{reference}/recal.bam",
        table="bam_input/final/{sample}/metrics/{reference}/validation_data.table"
    output:
        "bam_input/final/{sample}/{reference}/{sample}.ready.bam"
    shell:
        "rsync -v {input.bam} {output}"

rule index_ready:
    input:
        "bam_input/final/{sample}/{reference}/{sample}.ready.bam"
    output:
        "bam_input/final/{sample}/{reference}/{sample}.ready.bam.bai"
    shell:
        "samtools index {input}"