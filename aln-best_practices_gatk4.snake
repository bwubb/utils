import os
import yaml
from collections import defaultdict

### FUNCTIONS ###

def map_input(wildcards):
    inputs=[]
    for RUN,_run in list(FILES[wildcards.sample].items()):
        run,lane,index=_run['PU'].split('-',2)
        inputs.append(f'bam_input/work/{wildcards.sample}/{wildcards.reference}/{run}/{lane}/{index}/5.markdup.bam')
    assert len(inputs)>0
    return sorted(inputs)

def get_fastqs(wildcards):
    return {'R1':'FASTQ/'+FILES[wildcards.sample][f'{wildcards.run}-{wildcards.lane}']['files'][0],'R2':'FASTQ/'+FILES[wildcards.sample][f'{wildcards.run}-{wildcards.lane}']['files'][1]}
    #fastq.yaml does not currently include file paths.

### ### PYTHON ### ###

with open(config['project']['fastq_config']) as file:
    FILES=yaml.load(file,Loader=yaml.BaseLoader)
    SAMPLES=sorted(list(FILES.keys()))
    for sample in SAMPLES:
        os.makedirs(f'logs/cluster/{sample}',exist_ok=True)

### ### ### RULES ### ### ###

rule all:
    input:
        expand("bam_input/final/{sample}/{ref}/{sample}.bam",sample=SAMPLES,ref=config['reference']['key'])

rule bwa_mem:
    input:
        unpack(get_fastqs)
    output:
        temp("bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/1.mapped.bam"),
    params:
        LB=config['resources']['library_key'],
        fasta=config['reference']['fasta']
    threads:
        4
    shell:
        #fastq config has no path.
        """
        bwa mem -M -t {threads} {params.fasta} {input.R1} {input.R2} | samtools view -bS -o {output}
        """

rule samtools_readgroup:
    input:
        "bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/1.mapped.bam"
    output:
        rg=temp("bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/2.readgroup.bam"),
        fm=temp("bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/3.fixmate.bam"),
        qs=temp("bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/4.qsort.bam"),
    params:
        LB=config['resources']['library_key']
    threads:
        4
    shell:
        """
        samtools addreplacerg -@ {threads} -r 'ID:{wildcards.run}.{wildcards.lane}' -r 'PU:{wildcards.run}.{wildcards.lane}.{wildcards.index}' -r 'PL:illumina' -r 'LB:{params.LB}' -r 'SM:{wildcards.sample}' -o {output.rg} {input}
        samtools fixmate -m -@ {threads} {output.rg} {output.fm}
        samtools sort -@ {threads} -o {output.qs} {output.fm}
        """

rule samtools_markdup:
    input:
        "bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/4.qsort.bam"
    output:
        temp("bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/5.markdup.bam")
    params:
        stats="bam_input/work/{sample}/{reference}/{run}/{lane}/{index}/5.stats.txt"
    threads:
        4
    shell:
        """
        samtools markdup -s -f {params.stats} -@ {threads} {input} {output}
        """

rule input_ready:
    input:
        map_input
    output:
        temp("bam_input/work/{sample}/{reference}/input.bam")
    threads:
        4
    shell:
        """
        samtools merge -f -@ {threads} {output} {input}
        samtools index {output}
        """

rule RealignerTargetCreator:
    input:
        "bam_input/work/{sample}/{reference}/input.bam"
    output:
        "bam_input/work/{sample}/{reference}/IndelRealigner.intervals"
    params:
        memory="10240m",
        reference=config['reference']['fasta'],
        #known=config['resources']['known-sites']
        known=["$HOME/resources/gatk/1000G_phase1.indels.b37.vcf","$HOME/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        " -R {params.reference} -T RealignerTargetCreator -I {input} -o {output} -known {params.known[0]} -known {params.known[1]}"

#need config known
rule IndelRealigner:
    input:
        bam="bam_input/work/{sample}/{reference}/input.bam",
        targets="bam_input/work/{sample}/{reference}/IndelRealigner.intervals"
    output:
        temp("bam_input/work/{sample}/{reference}/realign.bam")
    params:
        memory="10240m",
        reference=config['reference']['fasta'],
        known=["$HOME/resources/gatk/1000G_phase1.indels.b37.vcf","$HOME/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T IndelRealigner -I {input.bam} -o {output} -targetIntervals {input.targets} -known {params.known[0]} -known {params.known[1]}"

#ExAc, gnomAD, or dbSNP resources can be used as known sites of variation
rule FirstPass_BaseRecalibrator:#update resources
    input:
        "bam_input/work/{sample}/{reference}/input.bam"
    output:
        "bam_input/final/{sample}/{reference}/metrics/recal_data.table"
    params:
        memory="10240m",
        reference=config['reference']['fasta'],
        knownSites=["$HOME/resources/gatk/dbsnp_138.b37.vcf","$HOME/resources/gatk/1000G_phase1.indels.b37.vcf","$HOME/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T BaseRecalibrator -I {input} -o {output} -knownSites {params.knownSites[0]} -knownSites {params.knownSites[1]} -knownSites {params.knownSites[2]}"

rule SecondPass_BaseRecalibrator:
    input:
        "bam_input/work/{sample}/{reference}/input.bam",
        "bam_input/final/{sample}/{reference}/metrics/recal_data.table"
    output:
        "bam_input/final/{sample}/{reference}/metrics/post_recal_data.table"
    params:
        memory="10240m",
        reference=config['reference']['fasta'],
        knownSites=["$HOME/resources/gatk/dbsnp_138.b37.vcf","$HOME/resources/gatk/1000G_phase1.indels.b37.vcf","$HOME/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T BaseRecalibrator -I {input[0]} -BQSR {input[1]} -o {output} -knownSites {params.knownSites[0]} -knownSites {params.knownSites[1]} -knownSites {params.knownSites[2]}"

rule AnalyzeCovariates:
    input:
        before="bam_input/final/{sample}/{reference}/metrics/recal_data.table",
        after="bam_input/final/{sample}/{reference}/metrics/post_recal_data.table"
    output:
        csv="bam_input/final/{sample}/metrics/BQSR.csv",
        pdf="bam_input/final/{sample}/metrics/BQSR.pdf"
    params:
        memory="10240m",
        reference=config['reference']['fasta'],
        knownSites=["$HOME/resources/gatk/dbsnp_138.b37.vcf","$HOME/resources/gatk/1000G_phase1.indels.b37.vcf","$HOME/resources/gatk/Mills_and_1000G_gold_standard.indels.b37.vcf"]
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T AnalyzeCovariates -before {input.before} -after {input.after} -csv {output.csv} -plots {output.pdf}"

rule PrintReads:
    input:
        bam="bam_input/work/{sample}/{reference}/input.bam",
        bqsr="bam_input/final/{sample}/{reference}/metrics/recal_data.table"
    output:
        temp("bam_input/work/{sample}/{reference}/recal.bam")
    params:
        memory="1020m",
        reference=config['reference']['fasta']
    shell:
        "java -Xmx{params.memory} -jar $HOME/software/GenomeAnalysisTK-3.7/GenomeAnalysisTK.jar -R {params.reference} -T PrintReads -I {input.bam} -BQSR {input.bqsr} -o {output}"

rule ValidateSamFile:
    input:
        "bam_input/work/{sample}/{reference}/recal.bam"
    output:
        "bam_input/work/{sample}/{reference}/validation_data.table"
    params:
        memory="10240m"
    shell:
        """
        set +e
        exitcode=$?
        java -Xmx{params.memory} -jar $HOME/software/picard/2.20.7/picard.jar ValidateSamFile I={input} O={output} MODE=SUMMARY
        if [ $exitcode -eq 1 ]
        then
            exit 1
        else
            exit 0
        fi
        """
        #Is this also in GATK? Then I could drop picard from this pipeline.

rule validation_pass:
    input:
        "bam_input/work/{sample}/{reference}/validation_data.table"
    output:
        "bam_input/final/{sample}/{reference}/validation_data.table"
    shell:
        """
        set +H
        if egrep -q 'No errors found' {input[0]}; then
            cp {input[0]} {output[0]}
        else
            egrep '^ERROR' {input[0]}
            exit 1
        fi
        """

rule ready_bam:
    input:
        bam="bam_input/work/{sample}/{reference}/recal.bam",
        table="bam_input/final/{sample}/{reference}/validation_data.table"
    output:
        "bam_input/final/{sample}/{reference}/{sample}.bam"
    shell:
        """
        rsync -v {input.bam} {output}
        samtools index {output}
        """
